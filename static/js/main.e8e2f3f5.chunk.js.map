{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["cardsArray","id","code","img","refreshPage","window","location","reload","sort","Math","random","shuffleArray","Card","props","isOpened","openCards","some","x","className","onClick","undefined","src","alt","cover","App","useState","solvedCards","state","setState","onCardClick","React","useCallback","card","find","clickedCard","time","Date","getTime","useEffect","interval","setInterval","clearInterval","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAGMA,G,MAAa,CACf,CACIC,GAAI,EACJC,KAAM,EACNC,IAAK,wCAET,CACIF,GAAI,EACJC,KAAM,EACNC,IAAK,wCAET,CACIF,GAAI,EACJC,KAAM,EACNC,IAAK,wCAET,CACIF,GAAI,EACJC,KAAM,EACNC,IAAK,wCAET,CACIF,GAAI,EACJC,KAAM,EACNC,IAAK,wCAET,CACIF,GAAI,EACJC,KAAM,EACNC,IAAK,wCAET,CACIF,GAAI,EACJC,KAAM,EACNC,IAAK,wCAET,CACIF,GAAI,EACJC,KAAM,EACNC,IAAK,uCAET,CACIF,GAAI,EACJC,KAAM,EACNC,IAAK,wCAET,CACIF,GAAI,GACJC,KAAM,EACNC,IAAK,uCAET,CACIF,GAAI,GACJC,KAAM,EACNC,IAAK,uCAET,CACIF,GAAI,GACJC,KAAM,EACNC,IAAK,yCAaPC,EAAc,WAChBC,OAAQC,SAAUC,QAAO,KAGR,SAACP,GACXA,EAAWQ,MAAK,iBAAM,GAAKC,KAAKC,YAG3CC,CAAaX,GAEb,IA8EMY,EAAO,SAACC,GACV,IAAMC,EAAWD,EAAME,UAAUC,MAAK,SAAAC,GAAC,OAAIA,IAAMJ,EAAMZ,MAEvD,OACI,qBAEIiB,UAAU,sBACVC,QAAS,kBAAML,OAAWM,EAAYP,EAAMM,QAAQN,EAAMZ,KAH9D,SAKKa,EACK,qBAAKO,IAAKR,EAAMV,IAAKmB,IAAI,GAAGJ,UAAU,gBACtC,qBAAKG,IAAKR,EAAMU,MAAOD,IAAI,GAAGJ,UAAU,iBANzCL,EAAMZ,KAYRuB,EA/FH,SAACX,GAAgB,IAAD,EACEY,mBAAwB,CAAEC,YAAa,KADzC,mBACjBC,EADiB,KACVC,EADU,KAGlBC,EAAcC,IAAMC,aACtB,SAAC9B,GACG,IAAM+B,EAAOhC,EAAWiC,MAAK,SAAAhB,GAAC,OAAIA,EAAEhB,KAAOA,KAEvC+B,IACIL,EAAMO,aAAeP,EAAMO,YAAYhC,OAAS8B,EAAK9B,KACrD0B,EAAS,CACLF,YAAY,CAAEM,EAAK/B,GAAI0B,EAAMO,YAAYjC,IAA9B,mBAAqC0B,EAAMD,gBAG1DE,EAAS,2BACFD,GADC,IAEJO,YAAY,2BACLF,GADI,IAEPG,MAAM,IAAIC,MAAOC,kBAKlC,CAACV,IAERW,qBAAU,WACN,IAAMC,EAAWC,aAAY,WACrBb,EAAMO,eACc,IAAIE,MAAOC,UAEAV,EAAMO,YAAYC,KAElC,KACXP,EAAS,CAAEF,YAAaC,EAAMD,iBAGvC,KAEH,OAAO,kBAAMe,cAAcF,OAG/B,IAAMxB,EAAYY,EAAMO,YAAN,CAAqBP,EAAMO,YAAYjC,IAAvC,mBAA8C0B,EAAMD,cAAeC,EAAMD,YAE3F,OACI,gCACI,qBAAKR,UAAU,iBAAf,SACI,wBACIA,UAAU,kBACVC,QAASf,EAFb,wBAOJ,qBAAKc,UAAU,eAAf,SACI,qBAAKA,UAAU,OAAf,SACKlB,EAAW0C,KAAI,SAAAV,GAAI,OAChB,cAAC,EAAD,CAEI/B,GAAI+B,EAAK/B,GACTE,IAAK6B,EAAK7B,IACVgB,QAASU,EACTd,UAAWA,EACXQ,MAAO,IALFS,EAAK/B,eC/HvB0C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e8e2f3f5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst cardsArray = [\n    {\n        id: 1,\n        code: 1,\n        img: 'https://picsum.photos/id/555/200/200',\n    },\n    {\n        id: 2,\n        code: 2,\n        img: 'https://picsum.photos/id/666/200/200',\n    },\n    {\n        id: 3,\n        code: 3,\n        img: 'https://picsum.photos/id/888/200/200',\n    },\n    {\n        id: 4,\n        code: 2,\n        img: 'https://picsum.photos/id/666/200/200',\n    },\n    {\n        id: 5,\n        code: 3,\n        img: 'https://picsum.photos/id/888/200/200',\n    },\n    {\n        id: 6,\n        code: 1,\n        img: 'https://picsum.photos/id/555/200/200',\n    },\n    {\n        id: 7,\n        code: 4,\n        img: 'https://picsum.photos/id/777/200/200',\n    },\n    {\n        id: 8,\n        code: 6,\n        img: 'https://picsum.photos/id/99/200/200',\n    },\n    {\n        id: 9,\n        code: 4,\n        img: 'https://picsum.photos/id/777/200/200',\n    },\n    {\n        id: 10,\n        code: 5,\n        img: 'https://picsum.photos/id/55/200/200',\n    },\n    {\n        id: 11,\n        code: 5,\n        img: 'https://picsum.photos/id/55/200/200',\n    },\n    {\n        id: 12,\n        code: 6,\n        img: 'https://picsum.photos/id/99/200/200',\n    },\n];\n\ntype CardGameState = {\n    clickedCard?: {\n        id: number;\n        code: number;\n        time: number;\n    };\n    solvedCards: Array<number>;\n};\n\nconst refreshPage = () => { \n    window. location. reload(false); \n}\n\nconst shuffleArray = (cardsArray: any) => {\n    return cardsArray.sort(() => .5 - Math.random());\n}\n\nshuffleArray(cardsArray);\n\nconst App = (props: any) => {\n    const [state, setState] = useState<CardGameState>({ solvedCards: [] });\n\n    const onCardClick = React.useCallback(\n        (id: number) => {\n            const card = cardsArray.find(x => x.id === id);\n\n            if (card) {\n                if (state.clickedCard && state.clickedCard.code === card.code) {\n                    setState({\n                        solvedCards: [card.id, state.clickedCard.id, ...state.solvedCards],\n                    });\n                } else {\n                    setState({\n                        ...state,\n                        clickedCard: {\n                            ...card,\n                            time: new Date().getTime()\n                        },\n                    })\n                }\n            }\n        }, [state]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (state.clickedCard) {\n                const currentTime = new Date().getTime();\n\n                const timeDiff = currentTime - state.clickedCard.time;\n\n                if (timeDiff > 2000) {\n                    setState({ solvedCards: state.solvedCards });\n                }\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    });\n\n    const openCards = state.clickedCard ? [state.clickedCard.id, ...state.solvedCards] : state.solvedCards;\n\n    return (\n        <div>\n            <div className=\"button-wrapper\">\n                <button \n                    className=\"new-game-button\"\n                    onClick={refreshPage}\n                >\n                        NEW GAME\n                </button>\n            </div>            \n            <div className=\"card-wrapper\">\n                <div className=\"card\">\n                    {cardsArray.map(card =>\n                        <Card\n                            key={card.id}\n                            id={card.id}\n                            img={card.img}\n                            onClick={onCardClick}\n                            openCards={openCards}\n                            cover={\"\"}\n                        />\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\ntype CardProps = {\n    id: number;\n    img: string;\n    cover: string;\n    openCards: Array<number>;\n    onClick: (cardId: number) => void;\n};\n\nconst Card = (props: CardProps) => {\n    const isOpened = props.openCards.some(x => x === props.id);\n\n    return (\n        <div\n            key={props.id}\n            className=\"card__image-wrapper\"\n            onClick={() => isOpened ? undefined : props.onClick(props.id)}\n        >\n            {isOpened\n                ? <img src={props.img} alt=\"\" className=\"card__image\" />\n                : <img src={props.cover} alt=\"\" className=\"card__image\" />\n            }\n        </div>\n    );\n};\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}